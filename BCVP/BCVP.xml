<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BCVP</name>
    </assembly>
    <members>
        <member name="T:BCVP.AOP.BlogCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:BCVP.AOP.BlogLogAOP">
            <summary>
            拦截器BlogLogAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:BCVP.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:BCVP.AOP.BlogRedisCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="T:BCVP.AOP.BlogTranAOP">
            <summary>
            事务拦截器BlogTranAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:BCVP.AOP.BlogTranAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="M:BCVP.AOP.CacheAOPbase.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP的拦截方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:BCVP.AOP.CacheAOPbase.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.AOP.CacheAOPbase.GetArgumentValue(System.Object)">
            <summary>
            object 转 string
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.AuthHelper.OverWrite.JwtHelper.IssueJwt(BCVP.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.AuthHelper.OverWrite.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:BCVP.AuthHelper.JwtTokenAuth">
            <summary>
            中间件
            原做为自定义授权中间件
            先做检查 header token的使用
            </summary>
        </member>
        <member name="F:BCVP.AuthHelper.JwtTokenAuth._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:BCVP.AuthHelper.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:BCVP.AuthHelper.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.AuthHelper.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:BCVP.AuthHelper.JwtToken.BuildJwtToken(System.Security.Claims.Claim[],BCVP.AuthHelper.PermissionRequirement)">
            <summary>
            获取基于JWT的Token
            </summary>
            <param name="claims">需要在登陆的时候配置</param>
            <param name="permissionRequirement">在startup中定义的参数</param>
            <returns></returns>
        </member>
        <member name="T:BCVP.AuthHelper.PermissionHandler">
            <summary>
            权限授权处理器
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionHandler.Schemes">
            <summary>
            验证方案提供对象
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionHandler.RoleModulePermissionServices">
            <summary>
            services 层注入
            </summary>
        </member>
        <member name="M:BCVP.AuthHelper.PermissionHandler.#ctor(Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,BCVP.IServices.IRoleModulePermissionServices,Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            构造函数注入
            </summary>
            <param name="schemes"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="accessor"></param>
        </member>
        <member name="T:BCVP.AuthHelper.PermissionItem">
            <summary>
            用户或角色或其他凭据实体,就像是订单详情一样
            之前的名字是 Permission
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionItem.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionItem.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:BCVP.AuthHelper.PermissionRequirement">
            <summary>
            必要参数类，类似一个订单信息
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.Permissions">
            <summary>
            用户权限集合，一个订单包含了很多详情，
            同理，一个网站的认证发行中，也有很多权限详情(这里是Role和URL的关系)
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:BCVP.AuthHelper.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:BCVP.AuthHelper.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{BCVP.AuthHelper.PermissionItem},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="T:BCVP.AutoMapper.AutoMapperConfig">
            <summary>
            静态全局 AutoMapper 配置文件
            </summary>
        </member>
        <member name="M:BCVP.AutoMapper.CustomProfile.#ctor">
            <summary>
            配置构造函数，用来创建关系映射
            </summary>
        </member>
        <member name="T:BCVP.Controllers.BlogController">
            <summary>
            博客管理
            </summary>
        </member>
        <member name="M:BCVP.Controllers.BlogController.#ctor(BCVP.IServices.IBlogArticleServices,BCVP.Common.IRedisCacheManager,Microsoft.Extensions.Logging.ILogger{BCVP.Controllers.BlogController})">
            <summary>
            构造函数
            </summary>
            <param name="blogArticleServices"></param>
            <param name="redisCacheManager"></param>
        </member>
        <member name="M:BCVP.Controllers.BlogController.Get(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            获取博客列表【无权限】
            </summary>
            <param name="id"></param>
            <param name="page"></param>
            <param name="bcategory"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.BlogController.Get(System.Int32)">
            <summary>
            获取博客详情
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.BlogController.DetailNuxtNoPer(System.Int32)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.BlogController.V2_Blogtest">
            <summary>
            获取博客测试信息 v2版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.BlogController.Post(BCVP.Model.Models.BlogArticle)">
            <summary>
            添加博客【无权限】
            </summary>
            <param name="blogArticle"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.BlogController.Delete(System.Int32)">
            <summary>
            删除博客
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.BlogController.Put(BCVP.Model.Models.BlogArticle)">
            <summary>
            更新博客信息
            </summary>
            <param name="BlogArticle"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.ClaimsController">
            <summary>
            这是一个测试的控制器，主要为了测试基于Claim的验证机制
            </summary>
        </member>
        <member name="M:BCVP.Controllers.ClaimsController.BatchDelete(System.String)">
            <summary>
            测试批量删除，如果是axios，记得要把数组格式化成 stringQuery
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.DbFirstController.#ctor(BCVP.Model.Models.MyContext)">
            <summary>
            构造函数
            </summary>
            <param name="myContext"></param>
        </member>
        <member name="M:BCVP.Controllers.DbFirstController.GetFrameFiles">
            <summary>
            获取 整体框架 文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.DbFirstController.GetModelFiles">
            <summary>
            获取 Model 层文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.DbFirstController.GetIRepositoryFiles">
            <summary>
            获取 IRepository 层文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.DbFirstController.GetIServiceFiles">
            <summary>
            获取 IService 层文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.DbFirstController.GetRepositoryFiles">
            <summary>
            获取 Repository 层文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.DbFirstController.GetServicesFiles">
            <summary>
            获取 Services 层文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.ImgController">
            <summary>
            图片管理
            </summary>
        </member>
        <member name="M:BCVP.Controllers.ImgController.DownImg(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            下载图片（支持中文字符）
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ImgController.InsertPicture(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            上传图片,多文件，可以使用 postman 测试，
            如果是单文件，可以 参数写 IFormFile file1
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.LoginController">
            <summary>
            登录管理【无权限】
            </summary>
        </member>
        <member name="M:BCVP.Controllers.LoginController.#ctor(BCVP.IServices.ISysUserInfoServices,BCVP.IServices.IUserRoleServices,BCVP.IServices.IRoleServices,BCVP.AuthHelper.PermissionRequirement)">
            <summary>
            构造函数注入
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="requirement"></param>
        </member>
        <member name="M:BCVP.Controllers.LoginController.GetJwtStr(System.String,System.String)">
            <summary>
            获取JWT的方法1
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.LoginController.GetJwtStrForNuxt(System.String,System.String)">
            <summary>
            获取JWT的方法2：给Nuxt提供
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.LoginController.GetJwtToken3(System.String,System.String)">
            <summary>
            获取JWT的方法3：整个系统主要方法
            </summary>
            <param name="name"></param>
            <param name="pass"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.LoginController.RefreshToken(System.String)">
            <summary>
            请求刷新Token（以旧换新）
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取JWT的方法4：给 JSONP 测试
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.LoginController.Md5Password(System.String)">
            <summary>
            测试 MD5 加密字符串
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.ModuleController">
            <summary>
            接口管理
            </summary>
        </member>
        <member name="M:BCVP.Controllers.ModuleController.Get(System.Int32,System.String)">
            <summary>
            获取全部接口api
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ModuleController.Post(BCVP.Model.Models.Module)">
            <summary>
            添加一条接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ModuleController.Put(BCVP.Model.Models.Module)">
            <summary>
            更新接口信息
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ModuleController.Delete(System.Int32)">
            <summary>
            删除一条接口
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.MonitorController.Get">
            <summary>
            SignalR send data
            </summary>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.PermissionController">
            <summary>
            菜单管理
            </summary>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.#ctor(BCVP.IServices.IPermissionServices,BCVP.IServices.IModuleServices,BCVP.IServices.IRoleModulePermissionServices,BCVP.IServices.IUserRoleServices,Microsoft.AspNetCore.Http.IHttpContextAccessor,BCVP.Common.HttpContextUser.IUser)">
            <summary>
            构造函数
            </summary>
            <param name="permissionServices"></param>
            <param name="moduleServices"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="userRoleServices"></param>
            <param name="httpContext"></param>
            <param name="user"></param>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.Get(System.Int32,System.String)">
            <summary>
            获取菜单
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.GetTreeTable(System.Int32,System.String)">
            <summary>
            查询树形 Table
            </summary>
            <param name="f">父节点</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.Post(BCVP.Model.Models.Permission)">
            <summary>
            添加一个菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.Assign(BCVP.Controllers.AssignView)">
            <summary>
            保存菜单权限分配
            </summary>
            <param name="assignView"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.GetPermissionTree(System.Int32,System.Boolean)">
            <summary>
            获取菜单树
            </summary>
            <param name="pid"></param>
            <param name="needbtn"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.GetNavigationBar(System.Int32)">
            <summary>
            获取路由树
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.GetPermissionIdByRoleId(System.Int32)">
            <summary>
            通过角色获取菜单【无权限】
            </summary>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.Put(BCVP.Model.Models.Permission)">
            <summary>
            更新菜单
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.PermissionController.Delete(System.Int32)">
            <summary>
            删除菜单
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.RoleController">
            <summary>
            角色管理
            </summary>
        </member>
        <member name="M:BCVP.Controllers.RoleController.Get(System.Int32,System.String)">
            <summary>
            获取全部角色
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.RoleController.Post(BCVP.Model.Models.Role)">
            <summary>
            添加角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.RoleController.Put(BCVP.Model.Models.Role)">
            <summary>
            更新角色
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.RoleController.Delete(System.Int32)">
            <summary>
            删除角色
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.TopicController">
            <summary>
            类别管理【无权限】
            </summary>
        </member>
        <member name="M:BCVP.Controllers.TopicController.#ctor(BCVP.IServices.ITopicServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
        </member>
        <member name="M:BCVP.Controllers.TopicController.Get">
            <summary>
            获取Tibug所有分类
            </summary>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.TopicDetailController">
            <summary>
            Tibug 管理
            </summary>
        </member>
        <member name="M:BCVP.Controllers.TopicDetailController.#ctor(BCVP.IServices.ITopicServices,BCVP.IServices.ITopicDetailServices)">
            <summary>
            构造函数
            </summary>
            <param name="topicServices"></param>
            <param name="topicDetailServices"></param>
        </member>
        <member name="M:BCVP.Controllers.TopicDetailController.Get(System.Int32,System.String,System.String)">
            <summary>
            获取Bug数据列表（带分页）
            【无权限】
            </summary>
            <param name="page">页数</param>
            <param name="tname">专题类型</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.TopicDetailController.Get(System.Int32)">
            <summary>
            获取详情【无权限】
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.TopicDetailController.Post(BCVP.Model.Models.TopicDetail)">
            <summary>
            添加一个 BUG 【无权限】
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.TopicDetailController.Update(BCVP.Model.Models.TopicDetail)">
            <summary>
            更新 bug
            </summary>
            <param name="topicDetail"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.TopicDetailController.Delete(System.Int32)">
            <summary>
            删除 bug
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.UserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:BCVP.Controllers.UserController.#ctor(BCVP.IServices.ISysUserInfoServices,BCVP.IServices.IUserRoleServices,BCVP.IServices.IRoleServices,BCVP.Common.HttpContextUser.IUser)">
            <summary>
            构造函数
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
            <param name="user"></param>
        </member>
        <member name="M:BCVP.Controllers.UserController.Get(System.Int32,System.String)">
            <summary>
            获取全部用户
            </summary>
            <param name="page"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.UserController.GetInfoByToken(System.String)">
            <summary>
            获取用户详情根据token
            【无权限】
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.UserController.Post(BCVP.Model.Models.sysUserInfo)">
            <summary>
            添加一个用户
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.UserController.Put(BCVP.Model.Models.sysUserInfo)">
            <summary>
            更新用户与角色
            </summary>
            <param name="sysUserInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.UserController.Delete(System.Int32)">
            <summary>
            删除用户
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.UserRoleController">
            <summary>
            用户角色关系
            </summary>
        </member>
        <member name="M:BCVP.Controllers.UserRoleController.#ctor(BCVP.IServices.ISysUserInfoServices,BCVP.IServices.IUserRoleServices,BCVP.IServices.IRoleServices)">
            <summary>
            构造函数
            </summary>
            <param name="sysUserInfoServices"></param>
            <param name="userRoleServices"></param>
            <param name="roleServices"></param>
        </member>
        <member name="M:BCVP.Controllers.UserRoleController.AddUser(System.String,System.String)">
            <summary>
            新建用户
            </summary>
            <param name="loginName"></param>
            <param name="loginPwd"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.UserRoleController.AddRole(System.String)">
            <summary>
            新建Role
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.UserRoleController.AddUserRole(System.Int32,System.Int32)">
            <summary>
            新建用户角色关系
            </summary>
            <param name="uid"></param>
            <param name="rid"></param>
            <returns></returns>
        </member>
        <member name="T:BCVP.Controllers.ValuesController">
            <summary>
            Values控制器
            </summary>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.#ctor(BCVP.IServices.IBlogArticleServices,AutoMapper.IMapper,BCVP.IServices.IAdvertisementServices,BCVP.Model.Love,BCVP.IServices.IRoleModulePermissionServices,BCVP.Common.HttpContextUser.IUser)">
            <summary>
            ValuesController
            </summary>
            <param name="blogArticleServices"></param>
            <param name="mapper"></param>
            <param name="advertisementServices"></param>
            <param name="love"></param>
            <param name="roleModulePermissionServices"></param>
            <param name="user"></param>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.Get">
            <summary>
            Get方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.Get(System.Int32)">
            <summary>
            Get(int id)方法
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.RequiredP(System.String)">
            <summary>
            测试参数是必填项
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.GetUserInfo(System.String)">
            <summary>
            通过 HttpContext 获取用户信息
            </summary>
            <param name="ClaimType">声明类型，默认 jti </param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.Source">
            <summary>
            to redirect by route template name.
            </summary>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.Destination">
            <summary>
            route with template name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.Post(BCVP.Model.Models.BlogArticle,System.Int32)">
            <summary>
            测试 post 一个对象 + 独立参数
            </summary>
            <param name="blogArticle">model实体类参数</param>
            <param name="id">独立参数</param>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.TestPostPara(System.String)">
            <summary>
            测试 post 参数
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.Put(System.Int32,System.String)">
            <summary>
            Put方法
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:BCVP.Controllers.ValuesController.Delete(System.Int32)">
            <summary>
            Delete方法
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:BCVP.Extensions.AuthorizationSetup">
            <summary>
            Db 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.AutoMapperSetup">
            <summary>
            Automapper 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.CorsSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.DbSetup">
            <summary>
            Db 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.HttpContextSetup">
            <summary>
            Db 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.JobSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.MemoryCacheSetup">
            <summary>
            Cors 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.MiniProfilerSetup">
            <summary>
            MiniProfiler 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.SqlsugarSetup">
            <summary>
            SqlSugar 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Extensions.SwaggerSetup">
            <summary>
            Swagger 启动服务
            </summary>
        </member>
        <member name="T:BCVP.Filter.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:BCVP.Filter.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:BCVP.Filter.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:BCVP.Filter.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:BCVP.Filter.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:BCVP.Filter.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:BCVP.Filter.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
        <member name="T:BCVP.Middlewares.RequRespLogMildd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:BCVP.Middlewares.RequRespLogMildd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:BCVP.Middlewares.RequRespLogMildd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,BCVP.IServices.IBlogArticleServices)">
            <summary>
            
            </summary>
            <param name="next"></param>
            <param name="blogArticleServices"></param>
        </member>
        <member name="T:BCVP.Middlewares.SignalRSendMildd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:BCVP.Middlewares.SignalRSendMildd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:BCVP.Middlewares.SignalRSendMildd.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.SignalR.IHubContext{BCVP.Hubs.ChatHub})">
            <summary>
            
            </summary>
            <param name="next"></param>
            <param name="hubContext"></param>
        </member>
        <member name="P:BCVP.Startup.Repository">
            <summary>
            log4net 仓储库
            </summary>
        </member>
        <member name="T:BCVP.SwaggerHelper.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:BCVP.SwaggerHelper.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:BCVP.SwaggerHelper.CustomApiVersion.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="F:BCVP.SwaggerHelper.CustomApiVersion.ApiVersions.V2">
            <summary>
            V2 版本
            </summary>
        </member>
        <member name="T:BCVP.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            </summary>
        </member>
        <member name="P:BCVP.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:BCVP.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:BCVP.SwaggerHelper.CustomRouteAttribute.#ctor(BCVP.SwaggerHelper.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
    </members>
</doc>
